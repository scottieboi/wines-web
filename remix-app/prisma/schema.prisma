generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model box {
  id       String        @id(map: "PK_box") @default(cuid())
  boxno    Int
  size     String?
  location location[]
}

model location {
  id                String    @id(map: "PK_location") @default(cuid())
  wineid            String?
  no                Int?
  boxid             String?
  cellarversion     Int?      @db.SmallInt
  box               box?      @relation(fields: [boxid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  winelist          winelist? @relation(fields: [wineid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([boxid], map: "location_boxid_fk")
  @@index([wineid], map: "location_wineid_fk")
}

model region {
  id       String     @id(map: "PK_region") @default(cuid())
  region   String     @unique
  winelist winelist[]
}

model vineyard {
  id       String     @id(map: "PK_vineyard") @default(cuid())
  vineyard String     @unique
  winelist winelist[]
}

model winelist {
  id             String     @id(map: "PK_winelist") @default(cuid())
  vintage        Int?       @db.SmallInt
  winename       String?
  winetypeid     String?
  percentalcohol Float?     @db.Real
  pricepaid      Decimal?   @db.Decimal(7, 2)
  yearbought     Int?       @db.SmallInt
  bottlesize     Int?       @db.SmallInt
  notes          String?
  rating         Int?       @db.SmallInt
  drinkrangefrom Int?       @db.SmallInt
  drinkrangeto   Int?       @db.SmallInt
  regionid       String?
  vineyardid     String?
  userid         String
  region         region?    @relation(fields: [regionid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  vineyard       vineyard?  @relation(fields: [vineyardid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  winetype       winetype?  @relation(fields: [winetypeid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  user           user       @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  location       location[]

  @@index([regionid], map: "winelist_regionid_fk")
  @@index([vineyardid], map: "winelist_vineyardid_fk")
  @@index([winetypeid], map: "winelist_winetypeid_fk")
  @@index([userid], map: "winelist_userid_fk")
}

model winetype {
  id       String     @id(map: "PK_winetype") @default(cuid())
  winetype String     @unique
  winelist winelist[]
}

model user {
  id           String   @id(map: "PK_user") @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  passwordHash String
  winelists    winelist[]
}
