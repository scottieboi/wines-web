generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model box {
  id          String  @id(map: "PK_box") @default(cuid())
  identifier  String
  size        String?
  description String?

  userid String
  user   user   @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  location location[]

  @@index([userid], map: "box_userid_fk")
}

model location {
  id            String @id(map: "PK_location") @default(cuid())
  number        Int?
  cellarversion Int?   @db.SmallInt

  boxid    String
  box      box      @relation(fields: [boxid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  wineid   String
  winelist winelist @relation(fields: [wineid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([boxid], map: "location_boxid_fk")
  @@index([wineid], map: "location_wineid_fk")
}

model region {
  id     String @id(map: "PK_region") @default(cuid())
  region String @unique

  userid String?
  user   user?   @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  winelist winelist[]

  @@index([userid], map: "region_userid_fk")
}

model vineyard {
  id       String @id(map: "PK_vineyard") @default(cuid())
  vineyard String @unique

  userid String?
  user   user?   @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  winelist winelist[]

  @@index([userid], map: "vineyard_userid_fk")
}

model winelist {
  id             String   @id(map: "PK_winelist") @default(cuid())
  vintage        Int?     @db.SmallInt
  winename       String?
  percentalcohol Float?   @db.Real
  pricepaid      Decimal? @db.Decimal(7, 2)
  yearbought     Int?     @db.SmallInt
  bottlesize     Int?     @db.SmallInt
  notes          String?
  rating         Int?     @db.SmallInt
  drinkrangefrom Int?     @db.SmallInt
  drinkrangeto   Int?     @db.SmallInt

  regionid   String?
  region     region?   @relation(fields: [regionid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  vineyardid String?
  vineyard   vineyard? @relation(fields: [vineyardid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  winetypeid String?
  winetype   winetype? @relation(fields: [winetypeid], references: [id], onDelete: Restrict, onUpdate: NoAction)
  userid     String
  user       user      @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  location location[]

  @@index([regionid], map: "winelist_regionid_fk")
  @@index([vineyardid], map: "winelist_vineyardid_fk")
  @@index([winetypeid], map: "winelist_winetypeid_fk")
  @@index([userid], map: "winelist_userid_fk")
}

model winetype {
  id       String @id(map: "PK_winetype") @default(cuid())
  winetype String @unique

  userid String?
  user   user?   @relation(fields: [userid], references: [id], onDelete: Restrict, onUpdate: NoAction)

  winelist winelist[]

  @@index([userid], map: "winetype_userid_fk")
}

model user {
  id           String   @id(map: "PK_user") @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  passwordHash String

  winelists winelist[]
  winetype  winetype[]
  region    region[]
  vineyard  vineyard[]
  box       box[]
}
